<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>URL Safety Checker</title>
</head>
<body>
    <h2>URL Safety Checker</h2>
    <form id="urlForm">
        <label for="urlInput">Enter URL:</label>
        <input type="text" id="urlInput" required>
        <button type="submit">Check Safety</button>
    </form>


    <div id="result"></div>


    <script>
        const urlForm = document.getElementById('urlForm');
        const urlInput = document.getElementById('urlInput');
        const resultDiv = document.getElementById('result');


        urlForm.addEventListener('submit', async function(event) {
            event.preventDefault();


            const url = urlInput.value.trim();


            try {
                const response = await fetch('/check-url', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ url })
                });


                const data = await response.json();
                if (data.safe) {
                    resultDiv.textContent = 'The URL is safe (uses HTTPS and has valid SSL/TLS certificate).';
                } else {
                    resultDiv.textContent = 'The URL is not safe or has an invalid SSL/TLS certificate.';
                }
            } catch (error) {
                resultDiv.textContent = `Error checking URL safety: ${error.message}`;
            }
        });
    </script>
</body>
</html>


Javascript
const express = require('express');
const https = require('https');
const tls = require('tls');
const { URL } = require('url');


const app = express();
const port = 3000;


app.use(express.json());


app.post('/check-url', async (req, res) => {
    const { url } = req.body;


    try {
        const parsedUrl = new URL(url);
        const hostname = parsedUrl.hostname;


        const options = {
            host: hostname,
            port: 443,
            method: 'HEAD', // Use HEAD method to only get headers
            timeout: 5000,  // Timeout in milliseconds
        };


        // Make a request to get the SSL certificate
        const reqCert = https.request(options, (response) => {
            const cert = response.socket.getPeerCertificate();
            if (!cert) {
                res.json({ safe: false, message: 'No SSL certificate found.' });
                return;
            }


            // Check certificate validity
            const validUntil = new Date(cert.valid_to).toISOString();
            const currentDate = new Date().toISOString();
            const isValid = currentDate < validUntil;


            res.json({ safe: isValid, certificate: cert });
        });


        reqCert.on('error', (err) => {
            res.json({ safe: false, message: `Error checking URL: ${err.message}` });
        });


        reqCert.end();
    } catch (error) {
        res.json({ safe: false, message: `Invalid URL: ${error.message}` });
    }
});


app.listen(port, () => {
    console.log(`Server is running on http://localhost:${port}`);
});
